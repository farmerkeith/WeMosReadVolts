Diary for WeMosReadVolts project
30 Oct 2017 
Basic sketch is working without calibration functions. 
I set it running overnight, this morning it had crashed doe to watchdog timer, not clear why. 
The tail end of the serial output is in serial01.txt which includes the statistics and the wdt reports. 
I had troubles with the WeMos pins outputting either 0 or Vcc even when they were set to INPUT. 
Eventually I found I could use pins D7 and D2 as inputs. 
At least some of the other pins, like the original D8, output Ground even when defined as INPUT.
The schematic is at SchematicWeMosReadVolts.pdf.
The results file (serial01.txt) also has some curious results I don't understand.  
There were 73,200 measurements before the watchdog timer stopped the sketch. 

The raw ADC values are around 1251 (that is the most frequent) which is more than 1023 which is the maximum value for a 10-bit ADC. Also, the raw number distribution does not use every value, but every 3rd or 4th value. It suggests that the raw ADC output from the ESP8266 is being multiplied by a factor between 3 and 4 (closer to 3 than 4, and possibly 3.3 (ratio of nominal Vcc to internal ADC reference) or 3.2 (nominal voltage divider ratio). This needs more investigation. 

The distribution is:
Peak count 54,781 (74.84% of total) for raw value 1251
Readings above peak count 1113 (1.52% of total) for raw value 1254 (one value only)
Readings below peak count (mainly at 5 values as follows):
count 8207 (11.21% of total) for raw value 1248
count 7810 (10.67% of total) for raw value 1244
count 1030 (1.41% of total) for raw value 1241
count  210 (0.29% of total) for raw value 1238
count   43 (0.06% of total) for raw value 1235
There are 6 scattered readings at values below 1235.

This is a skewed (non-Gaussian) distribution. My interpretation is that there is a contribution from noise (eg thermal noise), but there may well be another process going on that makes the readings vary, skewing the distribution towards slightly lower values..

30 October 2017 (pm)
Looking at my software more carefully, I realise that it was scaling the ADC readings before
printing them, so that explains the gaps between readings and the scale going beyond 1023. 
I adjusted the software to print actual ADC readings, and now they run from 4 (at zero volts on A0)
to 1024 (at 3.38 volts on A0). 
I am running a series of tests and recording the statistics in a text file Serial03.txt
which I plan to analyse to check the linearity of the outputs and determine the best 
algorithm to translate from the ADC value to the A0 pin voltage.

I am also running some tests to give some insight into the role of oversampling to give
higher resolution (eg will 100 readings give a more accurate result than 10 readings? and
should the average be used, or something else?)

Doing a Google search for "wemos d1 mini analogRead" came up with other people having 
problems with WeMos analog read. The main one of interest was at 
https://forum.micropython.org/viewtopic.php?t=2642 and titled 
"3.3 V range on the A0 analog input of Wemos D1 mini" has discussion about voltages on 
WeMos pins at startup / bootload. 
My understanding from this discussion is as follows (mostly from the posting by deshipu near the end)

GPIO0  D3 10K pull-up, also collector of NPN transistor 
          with RTS on base and DTR on emitter (from UART)
GPIO2  D4 10K pull-up, LED via 1K pull-up
GPIO4  D2 INPUT
GPIO5  D1 INPUT
GPIO12 D6 INPUT
GPIO13 D7 INPUT
GPIO14 D5 INPUT
GPIO15 D8 10K pull-down
GPIO16 D0 INPUT, also used for reset on wake-up from sleep

So there are 5 pins that can be used as high impedance inputs (that is, D1, D2, D5, D6, D7)

It is OK to use D3 and D4 for loads backed by Vcc.
It is OK to use D8 for loads backed by Ground. 

31 October 2017: ToDo list:
KiCad schematic:
 - add pictures of MosFET pins on each device (the BS250 is reversed from its data sheet) DONE
 - add a new schematic library for the WeMos D1 Mini module showing the internal resistors and diode DONE
 - add notes about the A0 series resistor, maybe a table of values DONE
Software:
 - add button recognition (in 2 minds about whether to use classes or not)
    I will probably try with classes and see how it looks. 
 - analyse sample data and derive algorithm for conversion of ADC reading to voltage STARTED
 - program the algorithm
BS250 data sheet:
 - make a new version updated with the correct pinout DONE 
Breadboard:
 - add labels to the buttons (Zero and Scale)

1 November 2017: ToDo list
Change the A0 voltage input to a two-pot, fine and coarse control (the current multi-turn pot is not able to give 1mv accuracy)
 - work out suitable resistor values in spreadsheet DONE
 - implement fine and coarse on the breadboard DONE
 - check how accurately the voltage can be set with the 1-turn pot (fine pot must cover something like 2 times the minimum coarse adjustment DONE
 - change KiCad schematic DONE
Research button de-bounce software
 - look at DFR_Key library - RESULT not useful for this
 - Google search for de-bounce - found Bounce2, using it but not happy although it works
 - Google search for button press detection
Experiment with various measurement times for calZero and calScale functions
 - note that ADS1115 can take up to 125 ms to make a measurement
 - review the stackExchange forum that I contributed to on the subject of measurement  results and timing DONE, no action
 
5 November 2017
Updated KiCad schematic to show internal resistors in WeMos D1 mini and also green and red LEDs on weMos pins D6 and D5. Note that LED class software for fade in and fade out using PWM still has problems and has been commented out.
Updated software WeMosReadVolts.h, with a) 64 reads of A0 for calZero and calScale
  b) 64 reads if A0 for getMilliVolts 
  c) changed variables to unsigned long integers where appropriate
Code still littered with commented out Serial.print() statements, to be removed
Push buttons for calibration interact with voltage setting pots a little bit. I presume it is the finite ON resistance of the MOSFETs used for switching - need to check by calculation. 

ToDo: take out excess Serial.print() statements
7 November 2017
ToDo list:
 - add capacitor to A0 pin in hardware DONE
 - add capacitor to A0 pin in schematic DONE
 - add WemosPinMap namespace/class file DONE
 - reorganise folder structure DONE
 - scale display of reading statistics distribution DONE
 - look at stats from last night DONE
 - add oversampling parameter DONE
 - do more runs with capacitor in place IN PROGRESS
 - look at statistics class
 - organise button software into functions and/or object FUNCTIONS DONE
 - look at voltages with oscilloscope DONE 10 Nov, see diary entry for that date
 - do calculations for calibration voltage error and fix design if necessary DONE, SEE BELOW

Oversampling sample files:
Oversampling  File Count
1 	Serial12.txt	18,400
2 	Serial10.txt	42,600
2 	Serial11.txt	94,000
4 	Serial13.txt	24,000
8 	Serial09.txt	97,200
16 	Serial14.txt	32,200
32
64	Serial06.txt	24,000 
64	Serial08.txt	4,400

Design change:
Change R7 to 1K Ohms
Change BS250 to IR4905
Change 2N7000 to IRFZ44N
Swap single turn and multi-turn pots
 - update schematic DONE
 - update hardware breadboard DONE

Conclusion from looking at distributions:
The oversampling is not working. Each value, obtained with a run of successive measurements, 
only produces many same values. Presumably the AtoD converter needs time to recover and 
be able to start measuring again. 
So I added a delay() in the oversampling loop. At least 10 ms seems to be required, even then the
distribution has a "hole" in the centre between two code values. So maybe it needs to be a bit more. 
I will try 20 ms (and 50 ms?). The issue is that oversampling 64 times with a delay of 50 ms reuires 3.2 seconds!
so there is a real limit to the improvement in accuracy obtainable by oversampling. 

Another idea: make the object read the voltage every 20 ms (or 50?) and put it through
a filter. Then the function of reading the voltage just consists of reading the voltage variable. 
Zero and Scale calibration need a bit more thought. 

9 Nov 2017
Implementation started. 
Filter performance analysed in spreadsheet model. Looking at 4-stage filter with decay parameter of 8. 
Resuslts looking promising with a single stage filter of 64 but it still needs more filtering. Results 22.

10 Nov
Running with multi-stage filter. Results still poor. 
Looked at the breadboard with oscilloscope. There is a strong cyclic waveform on the power line coming out of the WeMos
with a period of about 160 ms and a negative going pulse of about 400 mV. No wonder the voltage readings
show anomalies. I believe this waveform is coming from the WeMos. It does it with a blank sketch loaded. There is no such waveform on the USB output from either my computer or a USB charger, but it is always there with the WeMos. 
I concluded that I need to ignore meaasured values that are affected by this waveform. 
Added logic to test the adc code and if it is more than 10 counts away from the current running average, then
the reading is ignored. 
Statistics distribution now looks much more symmetrical and does not have a long negative tail any more. 

11 Nov 2017
Added a serial.print line to show the range of values in each statistics report. 
Commented out all but that line and started running it with different parameter settings. 
100 ms repeat on the voltage object gives about 3 mV range, while 20ms repeat gives over 10 mV sometimes. 

12 Nov 2017
Trying 50 ms repeat. 

17 Nov 2017
After a few days away from this project, I think I should try to filter out the cyclic waveform from the voltage to be measured. Given the waveform has a period of about 160ms, ie 6 Hz, I need a filter with a critical frequency no more than 6 Hz, and preferably (maybe) 0.6 Hz. Fc = 1/(2PiRC) so RC should be 0.6/(2Pi)=0.1 seconds. If C= 100 uF (ie 10^-4F) and RC=0.1 then R=0.1*10^4 = 10^3 = 1000 ohms. 

Using 1000 ohms in series with the existing voltage dividers would reduce the range of the measurements. Without the filter resistor, the voltage goes up to the rail, ie 5V nominally, about 4.7V in practice. Adding 1K would reduce this to 4.7*(10/11)=4.27 V. A 100 ohm resistor would change it to 4.7 * 10/10.1 = 4.65 V. 

I will put in a 100 Ohm, 100 uF filter and see what the waveform looks like. 
Schematic updated. DONE
Hardware to be updated: ToDo

23 Nov 2017
Hardware updated using 109 ohm resistor and 100 uF capacitor. Waveform snapshots taken. Results look like this:
 Power source      Filtering             Pulse amplitude
  USB              None                  1.09 V
  USB              100 uF C, no R        0.4  V
  USB              100 uF, 109 R         0.04 V (40 mV)
  Li Ion Cell      None                  0.125 V (125 mV)
  Li Ion Cell      100 uF C, no R        0.120 V (120 mV)
  Li Ion Cell      100 uF C, 109 R       0.008 V (8 mV)

The pulse period remains at around 150 ms throughout, although there are a variety of pulse timings. Unfiltered pulses are a bit less than 1 ms (like, 0.9 ms) but the filtering decreases amplitude and increases duration, up to 8 ms.   

So I think it is not very practical to fully get rid of the pulse waveform. The pulse waveform means that ADC results will always have a variability in them, depending on how the timing of the ADC sample vs the timing of the pulse waveform. If there is a single measurement, and it happens to be done at the time of a pulse, the result can be off by a whole 1V - which out of a 5V value is aa 20% error! 

My software strategy is as follows:
provide for 2 measurement modes:
Mode 1: regular (frequent) measurements with exponential decay filtering and discard of measurements that are too far away from the current mean. readVoltage() delivers the latest filtered value. 
Mode 2: no regular measurements. On command the ADC measures a number of times, discarding measurements too far away from the mean. 
All parameters used in each mode will be controlled via API functions, with default values that should work for most users. 
The same getVoltage() or readVoltage() function call will be used for both modes, with the difference determined by parameter setting. Eg readVoltage(0) will be used in mode1; readVoltage(1) will give a single measurement in mode 2. readVoltage(n) with n >1 will run for n milliseconds and will do the averaging and discarding within n milliseconds approximately. 
Control parameters for mode 1 are:
  interval between measurements (default: 20 ms)
  exponential decay filter parameter (default 16, can be 1 up to 1024) (?) 
  number of exponential decay filter stages (default 4, can be 1 up to 8).
  discard criterion (0 for no discard; 1,2,3 etc for allowable distance from mean; default [4])
  limit on multiple successive discards (default: 3)
Control parameters for mode 2 are:
  time allowed for measurement, ms (1 to 255 ms). 
  discard criterion (same as for mode 1)
  limit on multiple successive discards (only if needed, if it is then same as for mode 1)

The limit on multiple successive discards is needed for Mode 1 because if the starting point is a long way from the usual reading, the process may never converge. This should not be a problem in mode 2 assuming the initial average is close to the final, and all readings have equal weight.  

