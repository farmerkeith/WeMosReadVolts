Diary for WeMosReadVolts project
30 Oct 2017 
Basic sketch is working without calibration functions. 
I set it running overnight, this morning it had crashed doe to watchdog timer, not clear why. 
The tail end of the serial output is in serial01.txt which includes the statistics and the wdt reports. 
I had troubles with the WeMos pins outputting either 0 or Vcc even when they were set to INPUT. 
Eventually I found I could use pins D7 and D2 as inputs. 
At least some of the other pins, like the original D8, output Ground even when defined as INPUT.
The schematic is at SchematicWeMosReadVolts.pdf.
The results file (serial01.txt) also has some curious results I don't understand.  
There were 73,200 measurements before the watchdog timer stopped the sketch. 

The raw ADC values are around 1251 (that is the most frequent) which is more than 1023 which is the maximum value for a 10-bit ADC. Also, the raw number distribution does not use every value, but every 3rd or 4th value. It suggests that the raw ADC output from the ESP8266 is being multiplied by a factor between 3 and 4 (closer to 3 than 4, and possibly 3.3 (ratio of nominal Vcc to internal ADC reference) or 3.2 (nominal voltage divider ratio). This needs more investigation. 

The distribution is:
Peak count 54,781 (74.84% of total) for raw value 1251
Readings above peak count 1113 (1.52% of total) for raw value 1254 (one value only)
Readings below peak count (mainly at 5 values as follows):
count 8207 (11.21% of total) for raw value 1248
count 7810 (10.67% of total) for raw value 1244
count 1030 (1.41% of total) for raw value 1241
count  210 (0.29% of total) for raw value 1238
count   43 (0.06% of total) for raw value 1235
There are 6 scattered readings at values below 1235.

This is a skewed (non-Gaussian) distribution. My interpretation is that there is a contribution from noise (eg thermal noise), but there may well be another process going on that makes the readings vary, skewing the distribution towards slightly lower values..

30 October 2017 (pm)
Looking at my software more carefully, I realise that it was scaling the ADC readings before
printing them, so that explains the gaps between readings and the scale going beyond 1023. 
I adjusted the software to print actual ADC readings, and now they run from 4 (at zero volts on A0)
to 1024 (at 3.38 volts on A0). 
I am running a series of tests and recording the statistics in a text file Serial03.txt
which I plan to analyse to check the linearity of the outputs and determine the best 
algorithm to translate from the ADC value to the A0 pin voltage.

I am also running some tests to give some insight into the role of oversampling to give
higher resolution (eg will 100 readings give a more accurate result than 10 readings? and
should the average be used, or something else?)

Doing a Google search for "wemos d1 mini analogRead" came up with other people having 
problems with WeMos analog read. The main one of interest was at 
https://forum.micropython.org/viewtopic.php?t=2642 and titled 
"3.3 V range on the A0 analog input of Wemos D1 mini" has discussion about voltages on 
WeMos pins at startup / bootload. 
My understanding from this discussion is as follows (mostly from the posting by deshipu near the end)

GPIO0  D3 10K pull-up, also collector of NPN transistor 
          with RTS on base and DTR on emitter (from UART)
GPIO2  D4 10K pull-up, LED via 1K pull-up
GPIO4  D2 INPUT
GPIO5  D1 INPUT
GPIO12 D6 INPUT
GPIO13 D7 INPUT
GPIO14 D5 INPUT
GPIO15 D8 10K pull-down
GPIO16 D0 INPUT, also used for reset on wake-up from sleep

So there are 5 pins that can be used as high impedance inputs (that is, D1, D2, D5, D6, D7)

It is OK to use D3 and D4 for loads backed by Vcc.
It is OK to use D8 for loads backed by Ground. 

31 October 2017: ToDo list:
KiCad schematic:
 - add pictures of MosFET pins on each device (the BS250 is reversed from its data sheet) DONE
 - add a new schematic library for the WeMos D1 Mini module showing the internal resistors and diode DONE
 - add notes about the A0 series resistor, maybe a table of values DONE
Software:
 - add button recognition (in 2 minds about whether to use classes or not)
    I will probably try with classes and see how it looks. 
 - analyse sample data and derive algorithm for conversion of ADC reading to voltage STARTED
 - program the algorithm
BS250 data sheet:
 - make a new version updated with the correct pinout DONE 
Breadboard:
 - add labels to the buttons (Zero and Scale)

1 November 2017: ToDo list
Change the A0 voltage input to a two-pot, fine and coarse control (the current multi-turn pot is not able to give 1mv accuracy)
 - work out suitable resistor values in spreadsheet DONE
 - implement fine and coarse on the breadboard DONE
 - check how accurately the voltage can be set with the 1-turn pot (fine pot must cover something like 2 times the minimum coarse adjustment DONE
 - change KiCad schematic DONE
Research button de-bounce software
 - look at DFR_Key library - RESULT not useful for this
 - Google search for de-bounce - found Bounce2, using it but not happy although it works
 - Google search for button press detection
Experiment with various measurement times for calZero and calScale functions
 - note that ADS1115 can take up to 125 ms to make a measurement
 - review the stackExchange forum that I contributed to on the subject of measurement  results and timing DONE, no action
 
5 November 2017
Updated KiCad schematic to show internal resistors in WeMos D1 mini and also green and red LEDs on weMos pins D6 and D5. Note that LED class software for fade in and fade out using PWM still has problems and has been commented out.
Updated software WeMosReadVolts.h, with a) 64 reads of A0 for calZero and calScale
  b) 64 reads if A0 for getMilliVolts 
  c) changed variables to unsigned long integers where appropriate
Code still littered with commented out Serial.print() statements, to be removed
Push buttons for calibration interact with voltage setting pots a little bit. I presume it is the finite ON resistance of the MOSFETs used for switching - need to check by calculation. 

ToDo: take out excess Serial.print() statements
7 November 2017
ToDo list:
 - add capacitor to A0 pin in hardware DONE
 - add capacitor to A0 pin in schematic
 - add WemosPinMap namespace file
 - reorganise folder structure
 - look at statistics class
 - organise button software into functions and/or object
 - scale display of reading statistics distribution
 - look at stats from last night DONE
 - do more runs with capacitor in place


